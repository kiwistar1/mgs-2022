\documentclass[14pt]{extreport}
\usepackage[margin=3cm]{geometry}
\usepackage{graphicx}
\usepackage{url}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amsfonts}
\usepackage{svg}
\usepackage{xspace}
\usepackage{amssymb}
\usepackage{cancel}
\usepackage{color,colortbl}
\definecolor{code}{rgb}{ 0,0,0}
\newcommand\code[1]{\textcolor{code}{\texttt{#1}}\xspace}
\usepackage{stackengine}
\newsavebox\mybox
\newcommand\Includegraphics[2][]{\sbox{\mybox}{%
  \includegraphics[#1]{#2}}\abovebaseline[-.5\ht\mybox]{%
  \addstackgap{\usebox{\mybox}}}}
\newtheorem{definition}{Definition}
\newtheorem{theorem}{Theorem}

\newcommand\vs{\textit{vs.}\xspace}
\newcommand\eg{\textit{e.g.}\xspace}
\newcommand\Eg{\textit{E.g.}\xspace}
\newcommand\ie{\textit{i.e.}\xspace}
\newcommand\Ie{\textit{I.e.}\xspace}



\title{Advanced Math and Functional Programming,\\
2022 Mississippi Governor's School}

\author{\includegraphics[width=\textwidth]{mgs-2022.jpg}\\Dr.\ Jim\ Newton}
\setcounter{tocdepth}{2}
\setcounter{chapter}{-1}
\begin{document}

\maketitle
\sloppy


\pagebreak
\tableofcontents

\chapter{Introduction}

\begin{figure}[h]
\centering\includegraphics[width=0.9\textwidth]{Mathematics-and-Computing.jpg}
%% https://leverageedu.com/blog/mathematics-and-computing/
\end{figure}


\clearpage


\section{Objectives}


There are several objectives of this course:
\begin{description}
\item[Mathematics:] Ameliorate your love for Mathematics.
\item[Computer Science:] Develop a sense of functional
  programming.
\item[Communication:] Confidently defend your ideas.
\end{description}

Why math?  We assume that you as a student already loves math, and we
will use examples in abstract math as source of ideas to write
computer programs.


The mathematical and computer science topics have been chosen for this
course complement each other.  You will enforce what you've learned by
writing computer programs using the ideas and also by explaining to
your peers what it is that you have done.


It is important that the leaders of tomorrow, especially the leaders
in the technology sector, understand the impact on humans of
technological development.  We must know how to apply abstract
concepts to real computation problems, and how to explain their ideas
and defend their decisions to their peers.

Don't forget that you are working not only with machines but also with
humans.  In this course, we will maintain a respectful, inclusive, and
safe environment.  Remember that different people have different
strengths and weaknesses.  Scientific discussions can sometimes become
heated and experts might disagree about the best course of action.
We will keep disagreements objective and use science to test
ideas, rather than relying on emotions.

Good ideas that are never explained die and are forgotten.  It is my
belief that you don't understand something until you can explain it.
From time to time, some students will present their solutions to their
peers.  This means defending your choices, recognizing strengths and
shortcomings, and being subjected to peer review (important in the
scientific process).  This exercise is intended not only to learn to
accept constructive criticism but also to build confidence.

\pagebreak
\section{Note from your Instructor}

\begin{figure}
\includegraphics[width=\textwidth]{jimka-porto}
\end{figure}
I'm Dr. Jim Newton and I will be your instructor and coach for two
weeks as explore mathematical applications in functional programming.

I am a Mississippi native, and a graduate of Mississippi State
University where in 1988 I received a BS in Electrical Engineering and
in 1992 an MA in Mathematics.  Years later, in 2015, I received my PhD in
Computer Science from Sorbonne University in Paris, France.  I
currently live in Issy les Moulineaux, France, and work as an
assistant professor and researcher at EPITA (\url{www.epita.fr}), a
French engineering school

In 1981, I was a scholar at the first ever Mississippi Governor's
School.  I've designed this course remembering my own experience at
MGS, back in the day. I realize that different students coming from
different high schools in Mississippi have been exposed to various
levels of mathematics and computer science courses. I nevertheless
hope that regardless of your background and previous experience, you
will find this course interesting and challenging.  I am confident that
if you apply yourself and remain self-confident, you will succeed and
learn a lot.


\pagebreak
\section{Overview}


\begin{figure}
\includegraphics[height=4.2cm]{liebniz-newton.png}
%% \url{https://stemfellowship.org/who-got-there-first-newton-leibniz-and-their-work-on-calculus/}
%% from Wikipedia.
\includegraphics[height=4.2cm]{scala-programming.jpg}
\end{figure}


We will probably proceed through up to 5 units.  The first unit is special,
dealing with setting up the environment.  Units 2 through 5 are each organized
in two stages:

\begin{itemize}
\item Theory --- Learn mathematics and computer science concepts.
\item Practice --- Create code relating to the theory of various units.
\end{itemize}

There are two remaining sections (6 and 7) which you can continue with
after MGS if you find them interesting and challenging.

We will primarily cover introductions to two mathematical areas:
Abstract Algebra and Analysis (the fundamental principles of
Calculus).  Our practical treatment of Algebra and Analysis will help
you prepare for a more theoretical treatment at the university level.
  
We will use a functional programming language called Scala,
\url{https://www.scala-lang.org}.  Functional languages are considered
by some to be more difficult than imperative languages, and students
rarely start programming using a functional language.  Even if seen by
many people as being exotic, you will find that a functional
programming language can be a natural way to elegantly express certain
mathematical concepts.  You will later be able to take the things
you've learned and apply them back to other (more popular) programming
languages such as Python, Java Script, Lisp, C++, etc.



\section{Proposed Syllabus}

\begin{tabular}{ll|l|l}
Week & Day & Unit & Activities\\
\hline
~&&&\\
1 & Mon & 0, 1 & Environment Set-up, Hello World\\
1 & Tue & 2 & Sets and Functions, Theory, First Program\\
1 & Wed & 2 & Coding Exercises, Presentation\\
1 & Thu & 3 & Abstract Algebra, Theory\\
1 & Fri & 3 & Group Project, Coding Exercises\\
~&&&\\
\hline
~&&&\\
2 & Mon & 3 & Review, Coding Exercises\\
2 & Tue & 4,5 & Analysis: Convergence, and Sums\\
2 & Wed & 4,5 & Coding Exercises, Presentation\\
2 & Thu & 6,7 & Analysis: Derivative, Integral\\
2 & Fri & 6,7 & Coding Exercises, Presentation\\
~&&&\\
\hline
\end{tabular}

\chapter{Development Flow}

\begin{figure}[h]
  \centering
  \includegraphics[width=0.9\textwidth]{developers.png}
%% https://woz-u.com/wp-content/uploads/2020/02/What-Do-Software-Engineers-Do-WOZ-1-min.png
\end{figure}

\clearpage


\section{Editors}

\begin{figure}
  \centering
  \includegraphics[width=0.95\textwidth]{learning-curve.jpg}
%% https://linuxteaching.com/storage/img/images_1/vim_vs_emacs_detailed_comparison.png
  \caption{Some editors are easy to learn, others are very powerful after you learn them.}\label{lab.editors}
\end{figure}


To develop a computer program you must create and edit text files.
These are files containing only characters.  This \emph{can} be done
using a simple text editor such as Notepad, or a more powerful editor
such as \emph{emacs} or \emph{vi}.  Using an editor means the
programmer must have a more complete understanding of the compiler and
the build environment.  Many expert programmers prefer this approach
as it gives more low-level control to the user.


We will use an IDE (interactive
development environment) rather than a text editor for this project.

\section{VS Code}

\begin{figure}
  \centering
  \includegraphics[width=0.95\textwidth]{gitpodenv.png}
  \caption{The VS Code IDE runs stand-alone, or in the GitPod
    development environment. The GitPod/VS~Code integration allows
    you, the developer, to access remote a repository using only a web
    browser.}\label{lab.gitpod.env}
\end{figure}


An IDE allows you to edit code as a text file. It also allows testing
and debugging.  Learning a new programming language (Scala in our
code) is much easier with an IDE as the environment provides many
development hints such has highlighting, error detection, coding
suggestions, and completion.

An IDE often has a \emph{plug-in} for the programming language you
are using, because syntax, naming, and usemodel may be very different
from language to language.


The most popular IDE today for working with Scala is probably
IntelliJ.  However, setting up Scala on IntelliJ is often time
consuming.  Instead, we will use
\emph{VS~Code}\footnote{\url{https://code.visualstudio.com} and
\url{https://en.wikipedia.org/wiki/Visual_Studio_Code}} which comes
pre-installed in the cloud environment which we will use.  VS~Code is
a free and open source product made by Microsoft for Windows, Linux,
and MacOS.




\section{Version Control}


\begin{figure}
  \centering
  \includegraphics[width=0.95\textwidth]{branching.png}
  %https://betterprogramming.pub/git-branching-strategy-for-better-team-collaboration-aacb5f235d05
  \caption{Version Control allows us to manage development points in out project.}
  \label{label.vc}
\end{figure}


A version control system allows us to maintain a history of our work;
see Figure~\ref{label.vc}.  We can revisit previous states of our
project.  We can also create branches to develop different features in
parallel without them interfering with each other.

An important feature of modern version control systems is collaboration.
Developers can easily share their work with other developers.

We will use \emph{git} as the version control system.  In recent years
git has become ubiquitous in the field of open source software
development.  There are many videos on YouTube to help a person learn
git.  We will interact with git exclusively through our IDE.  The IDE
hides most of the difficulty of performing simple tasks, but if
something goes wrong, an IDE is not very good for debugging version
control issues.


\section{GitHub}



\begin{figure}[h]
  \centering
  \includegraphics[width=0.9\textwidth]{GitHub-How-to-use-GitHub-Edureka-300x241.png}
%%  \url{https://www.edureka.co/blog/how-to-use-github/}
  \caption{GitHub is a cloud service which hosts code repositories.
    You connect to GitHub either by web browser or directly from
    \emph{git}.}
\end{figure}



In this course we will be developing software together.   You will be able to
share your code with your classmates, and with the world.  However, you control
when you want to make your code available to the world, and when you want to
incorporate your classmate's code into your development area.

To achieve this goal we have a central repository of code, hosted by
GitHub on the cloud.  You will download (clone) a copy of this repository,
edit existing code, and create new code, and then occasionally upload your
contributions back to the central repository, making your
contributions available to everyone else.

GitHub is a web based service which hosts thousands of projects, small and large, in the cloud.
Typically, users have a development environment on their local computer
(laptop or desktop) and periodically upload and download changes to
the cloud.

The URL \url{https://github.com/jimka2001/mgs-2022}, is the public
entry point to the GitHub project which we will work on in this
MGS-2022 course.
How we will edit code in the GitHub project is described in Section~\ref{sec.gitpod}.

You must create an account on GitHub (if you don't have one already).  This will be done
in Section~\ref{sec.coding.1}.




\section{GitPod}\label{sec.gitpod}

\begin{figure}[h]
  \centering
  \includegraphics[width=0.9\textwidth]{gitpod-teaser.jpg}
%%  \url{https://www.gitpod.io/images/blog/cloud-based-development-for-everyone/teaser.jpg}
  \caption{GitPod provides a web-brower-based development environment
    which integrates VS~Code with GitHub.}
\end{figure}


Most people install software such as IDEs (integrated development
environments), editors, compiler, language implementations, version
control software, onto their personal computer or laptop.   You are free
to do that when you return home.  But for the entirety of MGS-2022, we'll
use a development environment entirely on the cloud.

We will use a web based service called, GitPod to provide an
environment for working with GitHub.  This environment and all the
code you develop will still be available to you after MGS-2022 is
finished.

The GitPod web site is \url{https://www.gitpod.io}.

Figure~\ref{lab.gitpod.env} shows an image of what the development environment looks like.



GitPod provides a version control interface. You should be able to do
all code editing, and collaboration efforts (push, pull, view history)
using this interface.

\section{Setting up the environment}

It may be a bit tedious to set up the development environment, because
before you can learn to use a piece of software, you have to install
it; necessarily you are installing things you don't yet understand.
The following steps should help, but often things go wrong with
set-up, so we'll troubleshoot as we go.

\begin{enumerate}
\item Create a GitHub account using an abstract user name.  Don't use
  your real name.  This URL,
  \url{https://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration}
  explains how to create a GitHub account.  There are many similar
  web-sites, e.g.,
  \url{https://www.wikihow.com/Create-an-Account-on-GitHub}.
  Primarily this is self explanatory at the URL
  \url{https://github.com/join}.
\item (Optional) Configure your GitHub account with an profile image.  Don't use
  a picture of yourself, rather use an abstract avatar
  such as \url{https://www.flaticon.com/search?word=animal+avatar}.
\item Configure GitHub to keep your email address private.
  \begin{enumerate}
  \item In the upper-right corner of any page, click your profile photo, then click \textbf{Settings}.
  \item In the "Access" section of the sidebar, click  \textbf{Emails}.

  \includegraphics[height=5cm]{github-settings.png}

  \item To keep your email address private when performing web-based
    Git operations, click \textbf{Keep my email addresses private}.
  \item To keep your email address private in commits you push from
    the command line, select \textbf{Block command line pushes that
      expose my email}.


  \end{enumerate}
  \includegraphics[width=0.95\textwidth]{email_privacy_block_command_line_pushes.png}

\item Open \url{https://github.com/jimka2001/mgs-2022} with your web browser.

\begin{figure}
\centering
  \includegraphics[width=0.85\textwidth]{fork-repo.png}
\caption{GitHub Fork}\label{fig.github.fork}
\end{figure}

\item Fork the repository. See Figure~\ref{fig.github.fork}.

\item Open the web-ide with GitPod, you may just prepend
  \url{http://gitpod.io/#} to the URL already in the web browser.

\begin{figure}
\centering
  \includegraphics[width=0.5\textwidth]{explorer.png}
\caption{Opening \code{Main.scala}}\label{lab.explorer}
\end{figure}

\item Find the Explorer, and open it to find \code{Main.scala} at
  \url{src/main/scala/introduction/Main.scala}. See Figure~\ref{lab.explorer}.

\begin{figure}
\centering
  \includegraphics[width=0.85\textwidth]{open-object-Main.png}
\caption{The editor pane of the \code{Main} object.}\label{lab.object.main}
\end{figure}

\item Click \code{Main.scala} to open the file in an editor pane.  You
  should see something like that shown in Figure~\ref{lab.object.main}.


\item The \code{run | debug} link between
  lines 2 and 3 may not appear immediately, you may have to wait a
  couple of minutes. If you don't see \textbf{run debug}, you may
  need to restart the build server, and recompile.  Find and click
  the Metals icon \includegraphics[height=2cm]{metals.png}.  This
  should open the Metals panel where you can \textbf{Restart the
    build Server} and \textbf{Cascade compile}. 
  
  \includegraphics[width=8cm]{buildserver.png}
  
  Thereafter, you should be able to find the \textbf{run|debug} link
  in the Scala code.

\item Find the definition \code{object Main}.
  If you click on \code{Main} you should see something like this:
  
  \includegraphics[height=1.5cm]{rundebug.png}
  
  Click \textbf{run}.  

\item You should see a new window pane appear below the program text
  showing  \code{hello world}, as shown in Figure~\ref{lab.afterrun}.


\begin{figure}
\centering
  \includegraphics[width=0.85\textwidth]{afterrun.png}
\caption{The editor pane after running the \code{Main} object.}\label{lab.afterrun}
\end{figure}


\end{enumerate}




\chapter{Sets and Functions}
\begin{figure}[h]
  \centering
  \includegraphics[width=0.9\textwidth]{Function_machine2.png}
\end{figure}

\clearpage

In this unit we will look at functions both from a mathematical
perspective and also from a programming perspective.  There are some
important similarities and some important differences.
\section{Mathematical perspective}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{math.jpg}
\end{figure}

We would like to talk about functions.  But where should we start the conversation?

You may already have some intuition about functions.  Sometimes
functions have names, like $\sin$, $\cos$, and $\log$.  Sometimes
functions lack names but have formulas such as
$\frac{x^2-1}{x^2+2x+1}$.

\subsection{Specifying functions}

What is a function? A function such as
\[f : X \to Y\]
is a correspondence between two sets.  But it is a special
correspondence.  In particular the function,~$f$, associates a unique,
well-determined, element of~$Y$ with each element of~$X$.
More precisely, if $x\in X$, then~$f(x)$ designates a unique,
well-determined, element of~$Y$.
\[x \in X \implies f(x) \in Y\,.\]

\begin{figure}
  \centering
  \includegraphics[width=8cm]{Function_color_example_3.png}
%%\url{https://commons.wikimedia.org/w/index.php?curid=20802095}, By
%%  \texttt{Function\_color\_example\_3.gif}: Wvbailey.
%%  The original uploader was Wvbailey at English Wikipedia.derivative work: Zerodamage ---
%%  This file was derived from: Function color example \texttt{3.gif}:, CC BY-SA 3.0.}
  \caption{A function is a well-defined correspondence of all the elements of one set
    (the domain) with some of the elements of another set (the range).}
\end{figure}

Conceptually, a function has three parts
\begin{enumerate}
\item A \emph{domain}, i.e., a place from which input values may be taken.
\item A \emph{range}, i.e., places where output values are found.
\item A \emph{rule}, i.e., a way of determining the output value given only the input value.
\end{enumerate}

To implement a function in the Scala programming language we have to
specify the \emph{domain} and \emph{range} in terms of what are called
\emph{types}, and we designate the \emph{rule} in terms of a
procedure.

\pagebreak
\subsection{Mathematical notation}

\begin{align}
  f(x) &= 3x + 1 \label{eq.simple.1}
\end{align}


Let's start with a very simple function~\eqref{eq.simple.1}.
Actually, the only thing specified here is the rule.  This function is
written in a mathematical notation where the domain and range are not
specified.  The same notation can be used for different choices of
domain and range.  For example, this function works for integers,
$\mathbb{Z}$, as input, but it will also work for natural numbers,
$\mathbb{N}$, rational numbers, $\mathbb{Q}$, real numbers, $\mathbb{R}$,
complex numbers, $\mathbb{C}$.  The same function will also work for
matrices or for functions themselves.


If we want to be more precise, we can use a more descriptive notation as in~\eqref{eq.simple.2}

\begin{align}
  f:\mathbb{N}\to\mathbb{N}~\text{by}~ f(x) &= 3x + 1 \label{eq.simple.2}
\end{align}


The domain and range of a function need not be the same, and need not
be a set of simple numbers.  For example, we use the symbol
$\mathbb{R}^2$ to denote the set of ordered pairs of real numbers;
i.e.,
\[\mathbb{R}^2 = \{(x,y)\mid x\in \mathbb{R} \wedge y\in\mathbb{R}\}\,.\]
Equation~\eqref{eq.simple.3} shows an example of such a function.

\begin{align}
  f:\mathbb{R}^2\to\mathbb{R}~\text{by}~ f(x,y) &= 3x - 2y + 1 \label{eq.simple.3}
\end{align}

Mathematical notation such as $a+b$, $a\times b$, $a-b$, $a^3$, and
$\frac{x^2-1}{x^2+2x+1}$, but we may also specify
functions using cases, like in Equation~\eqref{eq.simple.4}


\begin{equation}\label{eq.simple.4}
  |x| = \begin{cases}
    x &\,; \text{if $x>0$}\\
    0 &\,; \text{if $x=0$}\\
    -x &\,; \text{if $x<0$}
  \end{cases}
\end{equation}


\pagebreak
\subsection{Specifying functions by recurrence}
\label{sec.recurrence}

Functions can be defined in terms of themselves.  We might use an intuitive definition
such as Equation~\eqref{eq.simple.5}.

\begin{equation}\label{eq.simple.5}
x^n = \underbrace{x \times x \times \ldots \times x}_{n~\text{times}}\,.
\end{equation}

We can define the same function more explicitly by using recursion as
in Equation~\eqref{eq.slow.exponent}.

\begin{equation}\label{eq.slow.exponent}
  x^n = \begin{cases}
    1 &\,; \text{if $n=0$}\\
    x \times x^{n-1} &\,; \text{if $n > 0$}\\
    \frac{1}{x^{-n}} &\,; \text{if $n < 0$ and $m\ne 0$}
  \end{cases}
\end{equation}


Similarly, we can define the factorial as
\[n! = 1 \times 2 \times \ldots \times n\]
or we can define it as
\begin{equation}
  n! = \begin{cases}
    1 &\,; \text{if $n=0$}\\
    n \times (n-1)! &\,; \text{if $n > 0$}
  \end{cases}
\end{equation}

The first case need not be $n=0$.  We can define the Fibonacci
numbers.  Let $F(n)$ denote the n'th Fibonacci number.


\begin{equation}
  F(n) = \begin{cases}
    1 &\,; \text{if $n=1$}\\
    1 &\,; \text{if $n=2$}\\
    F(n-1) + F(n-2)  &\,; \text{if $n > 2$}
  \end{cases}
\end{equation}



Likewise, we can define the set of subsets of size $n$.  We use set
comprehension notation, see Section~\ref{sec.set.comprehension}.

\begin{equation}\label{eq.cases.1}
  \mathbb{P}_n(S) = \begin{cases}
    \{\emptyset\} &\,; \text{if $n=0$}\\
    \big\{\{x\} \cup y \mid x \in S, y \in \mathbb{P}_{n-1}(S \setminus \{x\})\big\}  &\,; \text{if $n > 0$}
  \end{cases}
\end{equation}

Notice that Equation~\eqref{eq.cases.1} specifies a function, not of
numbers, but of sets.  Its input is a set, and its output is a set of
sets.  I.e., the domain of $\mathbb{P}_n$ is a set of sets, and its
range is a set of sets of sets.

\section{Set comprehension}
\label{sec.set.comprehension}

One useful way to define subsets is with a set comprehension. In its
simplest form, it specifies the subset of elements which obey a given
predicate. A predicate is a Boolean valued function, \ie a function
whose value is either $true$ or $false$.  If $S$ is a set, and the
$p$ is a predicate defined on $S$, then the subset of elements, $x$,
for which $p(x)$ is $true$ is denoted:

\[\{x \mid x\in S, p(x)\}\,.\]

We may also compose conjoin multiple prediates such as


\[\{x \mid x\in S , p(x) , q(x)\}\,.\]


For example, the set of even integers between 0 and 100 inclusive may be denoted as such:

\[\{x \mid x\in \mathbb{Z}, \mathit{even}(x), 0 \leq x \leq 100 \}\,.\]

Finally, the value on the left hand side need not be a simple variable
such as $x$; rather it may an expression.  For example the squares of
the even integers between 0 and 100 can be expressed as follows:


\[\{x^2 \mid x\in \mathbb{Z}, \mathit{even}(x), 0 \leq x \leq 100 \}\,.\]

In Section~\ref{sec.recurrence}, we saw a set comprehension which
defines the subsets of size $n$.  As a final example suppose
$S=\{0,1,2,3\}$, and that $T$ is the set of all 2-element subsets of
$S$ which do not contain $2$.

The set of 3-element subsets of $S$ which contain $2$ can be written:
\[\{\{2\}\cup y \mid y\in T\}\,.\]


\clearpage\section{Programming perspective}
\begin{figure}
\centering
\includegraphics[width=0.65\textwidth]{cs.jpg}
\end{figure}




\subsection{Functional Programming Languages}

We will not spend much time talking about programming languages which
are not \emph{functional} but very briefly:  imperative programming
languages tend to model the machine, allowing you to phrase your
programs in a way which the machine can interpret.  Functional
languages, tend to make the machine understand mathematical notations,
which is a more natural and elegant way of thinking.  Functional
languages are often considered more difficult and more exotic.
However, not everyone (including your instructor) agrees that they
need to be considered difficult.


Imperative languages allow you to detail how a computation should be
carried out.  Functional languages allow you describe the problem in
terms of what the solution looks like.

\begin{figure}
\centering
\includegraphics[width=\textwidth]{functionalvsimperative.jpg}
\caption{Imperative vs Functional programming}
\end{figure}

The web site and lots of documentation about the Scala language can be
found here: \url{https://www.scala-lang.org}.  The newest Scala
version is 3.1.x; however, we will use 2.13.8 (or higher).

\subsection{Elements of a Scala program}

\begin{figure}
\centering
\includegraphics[width=\textwidth]{quadratic.png}
\caption{Some Elements of a Scala Program, definition of an object containing a function.}
\label{fig.scala.program}
\end{figure}

Figure~\ref{fig.scala.program} shows some of the elements of a Scala program.

\begin{enumerate}

\item Lines~7 through~15 define a function named
  \code{quadraticFormula}.  This function has 3 arguments, \code{a},
  \code{b}, and \code{c}, each of type \code{Int}---meaning that
  whenever the function is called, the call-site must provide 3
  integer arguments.

\item Lines~12 and~13 are two mathematical computations computing the
  roots of a specified polynomial. These values are each
  double-precision floating-point values (each a \code{Double}).


\item Computing the values on lines~12 and~13 involves computing a
  square root, $\sqrt{b^2 - 4ac}$.  The \code{sqrt} function in not
  normally visible to the programmer; it must be \emph{imported}.  The
  statement on line~3 imports the \code{sqrt} function name into the
  visible name space.

\item If $b^2=4ac$, then $\sqrt{b^2-4ac}=0$.  In this case the two
  values computed on Lines~12 and~13 will be the same (a root of order
  two), we specify that duplicate elements are removed from the list
  by \code{List(...).distinct} on lines~11 and~14.

\item The function, \code{quadraticFormula}, returns a value which has
  type \code{List[Double]}, which is a list of double-precision
  (64-bit) floating point numbers.  The valued within the function
  computed in the tail position is the return value from the function.
  In this case, the expression in tail position is the one comprising
  lines~11 through~14: \code{List(...).distinct}.  Usually the tail
  position is the final value (bottom-most) in the function.  But in
  the case of an \code{if/else} the tail-position value will be which
  ever branch of the conditional is taken at run-time.

\item Many other types are also available as variables, and function
  return values.  Some types which we will encounter are
  \code{Boolean}, \code{String}, \code{Tuple[]}, \code{Unit}, as well as
  many more.

\item The function named \code{main} which must be defined as shown in
  line~17, is regarded as the starting point of the program.  In this
  case, \code{main}, makes two calls to \code{quadraticFormula} on
  lines~19 and~20.

\item Function parameters are grouped with parentheses, and separated by commas.

\item Function calls are grouped with curly-braces.

\item The functions are defined with an \code{object}, starting on
  line~5 and ending on line~22.  This object has the name
  \code{QuadraticFormula} which is the same as the function but with
  different case, i.e., different capitalization.  In the Scala
  language, names are considered \emph{the same} if they have the same
  spelling and the same capitalization.

\item Line~1 defines a \code{package} named \code{functions}, which
  normally is the same as the directory name the file resides in.
  This correspondence of directory name and package name is
  conventional and not absolutely required.

\end{enumerate}

\subsection{Some other programming constructs}

\begin{enumerate}

\item Conditionals

\item Recursive functions

\item Collection types: \code{List[]}, \code{Tuple[]}, \code{Vector[]}, \code{Set[]}.
  
\end{enumerate}


\subsection{Live coding}
\label{sec.live.coding.fixed.sized.subsets}
We implement the \code{fixedSizedSubsets} in live-coding.  The program
will be modeled after equation~\eqref{eq.cases.1} in
Section~\ref{sec.recurrence}.

We write some tests.  Some of which pass, and some of which fail.  To
compute the number of subsets of size $k$ of a set of size $n$ we need
to compute~$n \choose k$ using the \code{factorial} function, which
you will develop.


You will also implement \code{countFixedSizedSubsets} as part of your
programming exercises.  This function is also needed to pass the
tests.


\clearpage
\section{Coding Exercises}\label{sec.coding.1}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{coding.jpg}
\end{figure}

\subsection{Implement the Quadratic Formula}\label{sec.quadratic.formula}

As a first program in Scala you will implement the quadratic formula.
recall that if
\[ax^2 + bx + c = 0\,,a\ne 0\]
then 
\[x_{1,2} = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}\,.\]

\begin{itemize}
\item Find the function \code{quadraticFormula}, implement a test
  for this function.   The Scala function implements the mathematical
  function $x_{1,2}(a,b,c) = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$.  The function computes the roots
  of the polynomial $ax^2 + bx + c$, assuming $a>0$, and assuming $b^2 \geq 4ac$.
  The test should go in the file \texttt{QuadraticFormula.scala} in
  directory \texttt{src/test/scala/functions}.  There is
  already a function stub you can use.
\item Extend the tests.  Remember
  that to test values of type \code{Double} you may need check
  whether the absolute value is less than some threshold ($\varepsilon$) rather than
  testing for exact equivalence.
\item Enhance \code{quadraticFormula}: Notice that the current
  implementation is inefficient, because it computes almost the same
  thing twice.  Also if you call the function with \code{a,b,c} for
  which there are no real solutions, the function will return
  \code{NaN,NaN}. What is \code{NaN}?  If you don't know, look it up
  with an internet search.  You should refactor the function to
  define a variable \code{discriminant} whose value is
  \[\Delta = b^2 - 4 a c\,.\]
  Then there are three cases, if ${\Delta < 0}$, if ${\Delta = 0}$, and
  if ${\Delta > 0}$. Refactor the function so that if there are no
  real roots it returns an empty list; if there is a unique 
  solution, return a list of one number; and if there are two
  distinct solutions, return a list of those two solutions
  \textbf{in increasing order}.  I.e., if you return \code{(a,b)}
  assure that $a < b$.  Also update the test case to check for
  $a<b$.
\end{itemize}


\subsection{Recursive Functions}
\label{sec.recursive.functions}
\begin{itemize}
\item File \code{Power.scala}
  \begin{itemize}
  \item Implement \code{power} for \code{Int} and \code{Double}.  In
    the case of \code{Double} you should also handle the case of a
    negative exponent.
  \item Implement \code{String} concatenation using the power model.
  \item Implement \code{List} concatenation using the power model.
  \end{itemize}
\item File \code{Factorial.scala}
  \begin{itemize}
  \item Implement \code{factorial}.  You will use \code{factorial} in
    Secion~\ref{sec.ex.counting.subsets}.
  \end{itemize}
\end{itemize}
  
\textbf{Discussion:} In the \code{factorial} function, do we
  need a case for $n=0$ and also $n=1$?  How does this relate to the
  principle of induction?  Look up \emph{Principle of Induction} if
  you need to review it.


\subsection{Fibonacci numbers}
\label{sec.fibonacci.numbers}
\begin{itemize}
\item Find the file \code{Fibonacci.scala}
\item Implement a recursive function such that given $n$, the function
  returns the nth Fibonacci number, $F_n$.
\item What is the largest Fibonacci number you can compute in Scala?
\item Search on the internet and find the Binet's formula for computing the nth Fibonacci number.
  Implement this function and compare the results to the recursive implementation.
\end{itemize}


\subsection{Counting subsets}
\label{sec.ex.counting.subsets}
\begin{itemize}
\item Find the file \code{CountSubsets.scala}.
\item In Section~\ref{sec.live.coding.fixed.sized.subsets} we
  implemented (will implement) \code{fixedSizedSubsets} as live
  coding.  You should \code{git pull} to update your workspace to
  reflect the work done in class.

\item Implement \code{countFixedSizedSubsets} in the file
  \code{CountSubsets.scala}.  There is a comment on the function stub.
  You may need to access the internet to find the correct formulas
  needed.

\item Make sure all the tests pass in \code{SetsAndFunctionsTestSuite.scala}.
\end{itemize}

%% TODO
%% add chapter about exists/foreach, exercises already in slides


\chapter{Abstract Algebra}

\begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{escher.jpg}
%% https://www.researchgate.net/publication/339436680_A_1d_Up_Approach_to_Conformal_Geometric_Algebra_Applications_in_Line_Fitting_and_Quantum_Mechanics/figures?lo=1
\end{figure}


\clearpage

\begin{figure}
\centering
\includegraphics[width=\textwidth]{galois.png}
\caption{Evariste Galois died at 20 years old as a result of a duel.}
\end{figure}

In Section~\ref{sec.quadratic.formula}, you worked with a function
which computes the (real) roots of a second-degree (quadratic)
polynomial given only its coefficients.  There is an analogous formula
to compute the roots of a cubic (degree-3) polynomial, and still
another to compute the roots of a degree-4 polynomial.  Is there
such formula for a polynomial of degree 5 (quintic) or higher?


The question of whether such a formula exists for the quintic had been
an open question for 250 years until Niels Henrik Abel proved its
non-existence in 1823 at the age of 21.



%%By https://www.parismuseescollections.paris.fr/fr/petit-palais/oeuvres/combat-devant-l-hotel-de-ville-le-28-juillet-1830, Public Domain, https://commons.wikimedia.org/w/index.php?curid=1280931

Around the same time a young, 20 year old, political activist of
post-revolutionary France, Evariste Galois, attempted to explain why
some higher-order polynomials are \emph{solvable in terms of radicals}
and others are not.  I use the word \emph{attempted} not to imply that
his explanation was wrong.  To the contrary, his ideas were correct
but nobody understood his treatment of the subject.  An example of his
writing is shown in Figure~\ref{fig.galois.hand}.  One well-respected
mathematician of the time, Joseph Fourier, took home a sizable work of
Galois to digest it but unfortunately died unexpectedly, and the work
was nearly lost.

The story of Evariste Galois who quickly wrote down the principles of
abstract algebra before his death as a result of a duel, is depicted
in several YouTube videos: notably \emph{Evariste Galois a
documentary} \url{https://www.youtube.com/watch?v=J6dsanpnpt0} and
\emph{Galois Theory Explained Simply}
\url{https://www.youtube.com/watch?v=Ct2fyigNgPY}, both produced by
Math Visualized.


It is not surprising that mathematicians did not understand the work
of Galois during his sort lifetime.  Figure~\ref{fig.galois.hand}
shows an example of his handwriting.

\begin{figure}
\centering
\includegraphics[width=0.75\textwidth]{galois-handwriting.jpg}
\caption{Galois's confusing handwriting}
\label{fig.galois.hand}
\end{figure}

In this unit we will study sets with mathematical structure.  This
approach to \emph{abstract algebra} is of course much cleaner than
that introduced by Galois.  Galois somewhat flippantly introduced the
\emph{group} and the \emph{field} just as a tool to talk about the
solvability of a polynomial, probably without realizing that they
deserve in-depth study themselves.

There are several mathematical structures defined by axioms.  We will
thereafter write programs as individuals and as teams to manipulate
these structures.

\begin{figure}
\centering
\includegraphics[width=0.75\textwidth]{revolution.jpg}
\caption{Galois, as a staunch republican, would have wanted to participate in the July Revolution of 1830 but was prevented by the director of the École Normale.}
\end{figure}


\clearpage
\section{Mathematical perspective}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{math.jpg}
\end{figure}


\begin{figure}
  \centering
\includegraphics[width=0.75\textwidth]{Algebraic-structures-magma-to-group.png}
%%\footnote{\url{https://en.wikipedia.org/wiki/Monoid#/media/File:Magma_to_group4.svg} by Ethaniel, Wikipedia.}
\caption{There are many algebraic structures which are linked by subset relations.}
\end{figure}

\subsection{Monoid}
\label{sec.monoid}
\begin{definition}[Monoid]
$(S,\circ)$ is called a \emph{monoid} if
\begin{enumerate}
\item Closure: $a,b \in S \implies a\circ b \in S$.
\item Associative: $a,b,c \in S \implies (a\circ b) \circ c = a \circ (b \circ c)$
\item Identity: $\exists e\in S$ such that $a\in S \implies a\circ e = e\circ a = a$
\end{enumerate}
\end{definition}

\noindent Notice that we assume that a monoid has an identity element, but we
don't assume that it is unique.  Can a monoid have more than one
identity element: $e_1$ and $e_2$?  The answer is no, but why?  

\begin{theorem}\label{th.identity.unique}
  The identity of a monoid is unique.
\end{theorem}
\begin{proof}
  Suppose $e_1$ and $e_2$ are both identities of monoid, $M$.
  Since $e_1$ is an identity, then $e_1e_2=e_2$.  But since $e_2$ is an identity,
  then $e_1e_2 = e_1$. Thus
  \[e_1 = e_1e_2 = e_2\]
\end{proof}

\subsection{Examples of monoids}


\begin{enumerate}
\item $(\mathbb{N},+)$, the set of natural numbers under addition is a monoid.

\item $(\mathbb{Z},-)$, the set of integers under subtraction is not a monoid.  Why?

\item The set of even integers under addition is a monoid.

\item The set of even integers under multiplication is a not monoid.  Why?
  
\item ${(\mathbb{R},\times)}$, the set of positive real numbers under multiplication is a monoid.

\item The set of $2\times 3$ matrices under addition is a monoid.  (See Section~\ref{sec.matrix.multiply} for a reminder of matrix addition.)

\item The set of $2\times 3$ matrices under multiplication is not a monoid.  However the set of $3\times 3$  matrices under multiplication is a monoid. Why? (See Section~\ref{sec.matrix.multiply} for a reminder of matrix multiplication.)

\item The set of subsets of a given set using the operation of union is a monoid.  What is the identity element?
\item The set of subsets of a given set using the operation of intersection is a monoid.  What is the identity element?

\item Let $\Sigma$ be any set of distinguishable elements: ${\Sigma = \{a,b,c,d\}}$.
  Now consider the set, ${\mathcal{L}(\Sigma)}$, of all sequences of finite length
  $(x_1, x_2, \ldots, x_n)$ for which $x_i \in \Sigma$ for $i=1, 2, \ldots, n$, $n\ge 0$.
  I.e., ${\mathcal{L}(\Sigma)}$ includes all sequences
  of length 12, and all sequences of length 54, and all sequences of length 10,051, etc.

  Let $+$ denote sequence concatenation.  E.g.,
  \[(a,c,a,a) + (d,a,c,a,b) = (a,c,a,a,d,a,c,a,b)\,.\]
  ${\mathcal{L}(\Sigma)}$ is a monoid.

  What is its identity element?

  Is it a commutative monoid?
  
\begin{figure}
\centering
\includegraphics[width=10cm]{512px-Big_Ben_Closeup.jpg}
%% \footnote{Arturo Mann, CC BY-SA 3.0 \url{http://creativecommons.org/licenses/by-sa/3.0/}, via Wikimedia Commons}
\caption{The movement of the hands of the clock is an example of a monoid arithmetic.}
\end{figure}


\item  The integers on the face of the clock form a
  monoid under addition with the following
  addition table.
 
  \begin{center}
    \small
    \begin{tabular}{c||c|c|c|c|c|c|c|c|c|c|c|c|}
      + & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 &12\\
      \hline
      \hline 1& 2& 3& 4& 5& 6& 7& 8& 9& 10& 11& 12& 1\\
      \hline 2& 3& 4& 5& 6& 7& 8& 9& 10& 11& 12& 1& 2\\
      \hline 3& 4& 5& 6& 7& 8& 9& 10& 11& 12& 1& 2& 3\\
      \hline 4& 5& 6& 7& 8& 9& 10& 11& 12& 1& 2& 3& 4\\
      \hline 5& 6& 7& 8& 9& 10& 11& 12& 1& 2& 3& 4& 5\\
      \hline 6& 7& 8& 9& 10& 11& 12& 1& 2& 3& 4& 5& 6\\
      \hline 7& 8& 9& 10& 11& 12& 1& 2& 3& 4& 5& 6& 7\\
      \hline 8& 9& 10& 11& 12& 1& 2& 3& 4& 5& 6& 7& 8\\
      \hline 9& 10& 11& 12& 1& 2& 3& 4& 5& 6& 7& 8& 9\\
      \hline 10& 11& 12& 1& 2& 3& 4& 5& 6& 7& 8& 9& 10\\
      \hline 11& 12& 1& 2& 3& 4& 5& 6& 7& 8& 9& 10& 11\\
      \hline 12& 1& 2& 3& 4& 5& 6& 7& 8& 9& 10& 11& 12\\
      \hline
    \end{tabular}
  \end{center}
  
    We may verify that every $a\in\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\}$
    we have  $12 + a = a + 12 = a$.



\item   The integers on the face of the clock also form a
  monoid under multiplication with the following
  multiplication table.
 
  \begin{center}
    \small
    \begin{tabular}{c||c|c|c|c|c|c|c|c|c|c|c|c|}
      * & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12\\
      \hline
      \hline 1 & 1  & 2  & 3  & 4  & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12\\
      \hline 2 & 2  & 4  & 6  & 8  & 10 & 12 & 2  & 4  & 6  & 8  & 10 & 12\\
      \hline 3 & 3  & 6  & 9  & 12 & 3  & 6  & 9  & 12 & 3  & 6  & 9  & 12\\
      \hline 4 & 4  & 8  & 12 & 4  & 8  & 12 & 4  & 8  & 12 & 4  & 8  & 12\\
      \hline 5 & 5  & 10 & 3  & 8  & 1  & 6  & 11 & 4  & 9  & 2  & 7  & 12\\
      \hline 6 & 6  & 12 & 6  & 12 & 6  & 12 & 6  & 12 & 6  & 12 & 6  & 12\\
      \hline 7 & 7  & 2  & 9  & 4  & 11 & 6  & 1  & 8  & 3  & 10 & 5  & 12\\
      \hline 8 & 8  & 4  & 12 & 8  & 4  & 12 & 8  & 4  & 12 & 8  & 4  & 12\\
      \hline 9 & 9  & 6  & 3  & 12 & 9  & 6  & 3  & 12 & 9  & 6  & 3  & 12\\
      \hline 10& 10 & 8  & 6  & 4  & 2  & 12 & 10 & 8  & 6  & 4  & 2  & 12\\
      \hline 11& 11 & 10 & 9  & 8  & 7  & 6  & 5  & 4  & 3  & 2  & 1  & 12\\
      \hline 12& 12 & 12 & 12 & 12 & 12 & 12 & 12 & 12 & 12 & 12 & 12 & 12\\
      \hline
    \end{tabular}
  \end{center}

  In the clock multiplication monoid, $1$ has the property that
  ${1 \times a = a\times 1 = a}$ for every ${a\in\{1,2,\ldots,12\}}$.
\end{enumerate}

\clearpage
\subsection{Group}

A notable property missing from a monoid is the ability solve equations.  As an example,
take the 12-clock above.  Which of these equations can be solved in the integers?
\begin{enumerate}
\item Solve for $a$ in $a\times 3 = 7$.
\item Solve for $b$ in $4\times b = 8$.
\item Solve for $c$ in $7\times c = 11$.
\end{enumerate}

We observe that some such equations have unique solutions, such as
$4\times b = 8 \implies b=2$. However, to systematically solve such an
equation we need to be able to find an inverse with respect to the
operation of the monoid.

\begin{align*}
  a\times 3 &= 7\\
  a\times 3 \times 3^{-1} &= 7 \times 3^{-1}\\
\end{align*}

But there is no integer, $3^{-1}\in\mathbb{Z}$, such that $1 = 3 \times 3^{-1}$.
However, some monoids do have the property that every element is
invertible. A monoid for which every element has a unique inverse is
called a group.  Essential to the idea of inverse is that an inverse
be unique.



\begin{definition}[Group]
$(G,\circ)$ is called a \emph{group} if
\begin{enumerate}
\item $(G,\circ)$ is a monoid.
\item Inverse: $\forall a\in G~\exists a^{-1}\in G$ such that $a\circ a^{-1} = a^{-1} \circ a = e$
\end{enumerate}
\end{definition}

\begin{definition}[Abelian Group]
  If $G$ is a group such that $a\circ b = b\circ a$ for all
  $a,b\in G$, then we call $G$ an \emph{Abelian} group.
\end{definition}



A group has an identity which is also the identity of the monoid,
which we already know to be unique.  See
Theorem~\ref{th.identity.unique}.  But we can ask a similar uniqueness
question about the inverse.  Can an element $a\in S$ have two
different inverses?  No, but why?

\begin{theorem}
  Each element of a group has exactly one inverse.
\end{theorem}
\begin{proof}
  Let $G$ be a group with identity $e$. Let $a\in G$ have inverses $x$ and~$y$.
  \begin{align*}
    x &= x\circ e \\
    &= x \circ ( a \circ y)\\
    &= (x \circ  a) \circ y\\
    &= e \circ y\\
    &= y
  \end{align*}
\end{proof}


\subsection{Examples of groups}
\begin{enumerate}
\item The set of integers, ${\mathbb{Z} = \{0, \pm 1, \pm 2, \ldots\}}$, is a group under
integer addition.   Why?
\begin{itemize}
\item $(\mathbb{Z},+)$ is a monoid with $0$ being the identity.
\item If $a \in \mathbb{Z}$ there exists $b\in\mathbb{Z}$ such that $a+b=0$.  E.g.   ${12 + (-12) = 0}$
\end{itemize}

\item The integers under multiplication is not a group.  Why?

  \begin{figure}
    \centering
  %% This file is licensed under the Creative Commons Attribution-Share Alike 3.0 Unported license.
  %% From https://en.wikipedia.org/wiki/Rubik%27s_Cube_group
  %% Converted to png
  \includegraphics[width=6cm]{Rubiks_cube.png}
  \caption{The set of rotations of the Rubik's cube is a group.}
\end{figure}

\item The set of rotations of the $n\times n$ Rubik's cube is a group.   Every rotation has an inverse rotation, and the null-rotation is the identity.

\item The set of $3\times 3$ matrices of real numbers is not a group.  Why?

\item The set of subsets of a given set using the operation of union is not a group.  Why?
\item The set of subsets of a given set using the operation of intersection is not a group.  Why?
\item The set subsets of a given set, $G$, using
  \[A\circ B = (A\cap  \overline{B}) \cup (\overline{A}\cap B)\]
  as the operation, is a group.  Every element is its own inverse.  The identity element is the empty set, $\emptyset$.



\item Imagine a clock going from 1 to 11, rather than 1 to 12.
  Similar to the clock monoid seen above, here is the multiplication
  table of the strange 11-clock.
  
  \begin{center}
    \small
    \begin{tabular}{c||c|c|c|c|c|c|c|c|c|c|c|}
      * & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 \\
      \hline
\hline 1& 1& 2& 3& 4& 5& 6& 7& 8& 9& 10& 11\\
\hline 2& 2& 4& 6& 8& 10& 1& 3& 5& 7& 9& 11\\
\hline 3& 3& 6& 9& 1& 4& 7& 10& 2& 5& 8& 11\\
\hline 4& 4& 8& 1& 5& 9& 2& 6& 10& 3& 7& 11\\
\hline 5& 5& 10& 4& 9& 3& 8& 2& 7& 1& 6& 11\\
\hline 6& 6& 1& 7& 2& 8& 3& 9& 4& 10& 5& 11\\
\hline 7& 7& 3& 10& 6& 2& 9& 5& 1& 8& 4& 11\\
\hline 8& 8& 5& 2& 10& 7& 4& 1& 9& 6& 3& 11\\
\hline 9& 9& 7& 5& 3& 1& 10& 8& 6& 4& 2& 11\\
\hline 10& 10& 9& 8& 7& 6& 5& 4& 3& 2& 1& 11\\
\hline 11& 11& 11& 11& 11& 11& 11& 11& 11& 11& 11& 11\\
      \hline
    \end{tabular}
  \end{center}

In this example, we see that the set is NOT a multiplicative group,
because the element 11 has no inverse.  


\item Every non-11 element in the table above 
has an inverse.  We can tediously verify the existence of a unique
inverse for every non-11 element.

The set of non-11 elements of the 11-clock is a multiplicative group
with the following multiplication table.

  \begin{center}
    \small
    \begin{tabular}{c||c|c|c|c|c|c|c|c|c|c|}
      * & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 \\
      \hline
\hline 1& 1& 2& 3& 4& 5& 6& 7& 8& 9& 10\\
\hline 2& 2& 4& 6& 8& 10& 1& 3& 5& 7& 9\\
\hline 3& 3& 6& 9& 1& 4& 7& 10& 2& 5& 8\\
\hline 4& 4& 8& 1& 5& 9& 2& 6& 10& 3& 7\\
\hline 5& 5& 10& 4& 9& 3& 8& 2& 7& 1& 6\\
\hline 6& 6& 1& 7& 2& 8& 3& 9& 4& 10& 5\\
\hline 7& 7& 3& 10& 6& 2& 9& 5& 1& 8& 4\\
\hline 8& 8& 5& 2& 10& 7& 4& 1& 9& 6& 3\\
\hline 9& 9& 7& 5& 3& 1& 10& 8& 6& 4& 2\\
\hline 10& 10& 9& 8& 7& 6& 5& 4& 3& 2& 1\\
      \hline
    \end{tabular}
  \end{center}




\item In Section~\ref{sec.monoid}, we defined the set
  ${\mathcal{L}(\Sigma)}$ of finite-length sequences using list
  concatenation as the monoid operation.  This set is not a group.
  Why?


\end{enumerate}


\clearpage
\subsection{Ring}

A monoid and a group are both sets with a single operation for which
the elements of the set interact to obey a set of axioms (the monoid
axioms or the group axioms).  Now we will look at sets with two
operations, which you can na\"ively think of as addition and
multiplication. 

\begin{definition}[Ring]
$(S,+,\times)$ is called a \emph{ring} if
\begin{enumerate}
\item $(S,+)$ is an Abelian group.
\item $(S,\times)$ is a monoid.
\item Distributive: $a,b,c  \in S \implies a\times(b+c)=(a\times b)+(a\times c)$.
\end{enumerate}    

\noindent In the special case that $(S,\times)$ is commutative,
$(S,+,\times)$ is called an Abelian ring.
\end{definition}


In the set of whole numbers we can think of multiplication as repeated
addition.  However, in many cases this does not hold.  For example,
matrix multiplication cannot be expressed simply as repeated matrix
addition.  In fact, in a ring, the only thing that connects the
addition and the multiplication is the distributive axiom.
Multiplication or addition may be defined in strange ways, but if the
ring axioms are satisfied, the ring is valid.

In the integers $0\cdot a = a\cdot 0 = 0$.  Actually this principle,
called \emph{annihilation} is true for rings in general as shown in
Theorem~\ref{th.ring.annihilation}.  Several other familiar
connections between multiplication and addition also hold in general
for rings.  In particular $-1 \cdot -1 = 1$
(Theorem~\ref{th.ring.-1}), and $-1\cdot a = -a$
(Theorem~\ref{th.ring.-a}).

\begin{theorem}\label{th.ring.annihilation}
  For ring, $S$ with additive identity $z$ and multiplicative identity $e$, we have $za = az = z$ for all $a\in S$.
\end{theorem}
Let's denote the additive inverse of any element $x$ by $\overline{x}$
\begin{proof}
  \begin{align*}
    za &= za + z\\
    &= za + (za + \overline{za})\\
    &= (za + za) + \overline{za}\\
    &= (z + z)a  + \overline{za}\\
    &= za  + \overline{za}\\
    &= z
  \end{align*}
  Likewise,
  \begin{align*}
    aa &= az + z\\
    &= az + (az + \overline{az})\\
    &= (az + az) + \overline{az}\\
    &= a(z + z)  + \overline{az}\\
    &= az  + \overline{az}\\
    &= z
  \end{align*}
  
\end{proof}
\begin{theorem}\label{th.ring.-1}
  For ring, $S$, with multiplicative identity
  $e$, we have $\overline{e}\cdot\overline{e} = e$.
\end{theorem}
\begin{proof}
 Let $z$ be the additive identity of the ring.
  \begin{align*}
    \overline{e}\cdot\overline{e} &= \overline{e}\cdot\overline{e} + z\\
    &= \overline{e}\cdot\overline{e} + (\overline{e} + e)\\
    &= \overline{e}\cdot\overline{e} + (\overline{e}\cdot e + e)\\
    &= (\overline{e}\cdot\overline{e} + \overline{e}\cdot e) + e\\
    &= \overline{e}\cdot(\overline{e} + e) + e\\
    &= \overline{e}z + e\\
    &= z + e & \text{By Theorem~\ref{th.ring.annihilation}}\\
    &=  e 
\end{align*}
\end{proof}

\begin{theorem}\label{th.ring.-a}
  For ring, $S$, with 
  $e$, we have $\overline{e}\cdot a = \overline{a}$ for all $a\in S$.
\end{theorem}
\begin{proof}
  \begin{align*}
    \overline{e}\cdot a &=     \overline{e}\cdot a + a + \overline{a}\\
    &=     \overline{e}\cdot a + e\cdot a + \overline{a}\\
    &=     (\overline{e} + e)\cdot a + \overline{a}\\
    &=     z\cdot a + \overline{a}\\
    &=     z + \overline{a} & \text{By Theorem~\ref{th.ring.annihilation}}\\
    &=     \overline{a}
  \end{align*}
\end{proof}

\subsection{Examples of rings}
\begin{enumerate}
\item The integers $(\mathbb{Z},+,\times)$ is a ring.
\item The integers $(\mathbb{N},+,\times)$ is not a ring.  Why?
\item The set of $n\times n$ matrices, for a fixed value of $n>0$ is a ring.
\item The set of $2\times 3$ matrices is not a ring.  Why?
\item $\mathbb{Z}[x]$, the set of polynomials with integer
  coefficients such as ${3x^4+2x^2-5x+1}$ is a ring.
\item $\mathbb{Q}[x]$, $\mathbb{R}[x]$, $\mathbb{C}[x]$,
  $(\mathbb{Z}/p)[x]$ for prime $p$. 
\item The set of polynomials with rational coefficients with leading
  coefficient equal to 1 is not a ring.
  ($x^3 + \frac{1}{2}x^2+ 5x - \frac{2}{3}$)  Why?
\item The set of subsets of a given set using intersection as
  multiplication and exclusive or as addition forms a ring.
\item The set of 8-bit sequences (bytes) consisting of 0 and 1, such
  as 00101101, with the two operations AND and XOR, defined bitwise
  using the following tables is a ring.
\begin{center}
    \begin{tabular}{c||c|c|}
      XOR & 0 & 1 \\
\hline
\hline0& 0& 1\\
\hline1& 1& 0\\
\hline
\end{tabular}\quad\quad
    \begin{tabular}{c||c|c|}
      AND & 0 & 1 \\
      \hline
\hline0& 0& 0\\
\hline1& 0& 1\\
\hline
\end{tabular}
\end{center}
  
For example
\begin{itemize}
\item 00101101 XOR 00110011 = 00011110
\item 00101101 AND 00110011 = 00100001
\end{itemize}

\end{enumerate}

\clearpage
\subsection{Field}

The most complicated structure we will examine is the field.  You can
think of a field as set which is a ring but more than that.  In a ring
you can add, subtract, and multiply.  But in a field you can also
divide with the exception that you cannot divide by zero. 

\begin{definition}[Field]
$(F,+,\times)$ is called a \emph{field} if
\begin{enumerate}
\item $(F,+, \times)$ is an Abelian Ring.
\item $(F \setminus 0, \times)$ is a (Abelian) group, where $0$ is the identity under $+$.
\end{enumerate}    
\end{definition}


\subsection{Examples of fields}
\begin{enumerate}
\item The rational numbers, $\mathbb{Q}$.
\item The set of $n\times n$ matrices is not a field.  Why?
\item The set of $2\times 2$ matrices of the form $\begin{bmatrix}a&-b\\b&a\end{bmatrix}$ where $a,b\in\mathbb{Q}$.
\item The integers modulo $12$.
\item The integers modulo any prime such as $7$.

\begin{center}
    \begin{tabular}{c||c|c|c|c|c|c|c|}
      $+$ & 0 & 1 & 2 & 3 & 4 & 5 & 6 \\
\hline0& 0& 1& 2& 3& 4& 5& 6\\
\hline1& 1& 2& 3& 4& 5& 6& 0\\
\hline2& 2& 3& 4& 5& 6& 0& 1\\
\hline3& 3& 4& 5& 6& 0& 1& 2\\
\hline4& 4& 5& 6& 0& 1& 2& 3\\
\hline5& 5& 6& 0& 1& 2& 3& 4\\
\hline6& 6& 0& 1& 2& 3& 4& 5\\
\hline
\end{tabular}\quad\quad
    \begin{tabular}{c||c|c|c|c|c|c|c|}
      $\times$ & 0 & 1 & 2 & 3 & 4 & 5 & 6 \\
\hline0& 0& 0& 0& 0& 0& 0& 0\\
\hline1& 0& 1& 2& 3& 4& 5& 6\\
\hline2& 0& 2& 4& 6& 1& 3& 5\\
\hline3& 0& 3& 6& 2& 5& 1& 4\\
\hline4& 0& 4& 1& 5& 2& 6& 3\\
\hline5& 0& 5& 3& 1& 6& 4& 2\\
\hline6& 0& 6& 5& 4& 3& 2& 1\\
\hline
\end{tabular}
\end{center}

With these addition and multiplication tables we can tediously verify
that
\begin{itemize}
\item $0$ is the additive identity.
\item $1$ is the multiplicative identity.
\item Every element has an additive inverse.
\item Every non-zero element has a multiplicative inverse.
\item Addition and multiplication are associative.
\item Addition and multiplication are commutative.
\item The distributive property holds.
\end{itemize}

\item The set $\mathbb{Q}\{\sqrt{2}\} = \{a+b\sqrt{2} \mid a,b\in\mathbb{Q}\}$
  is a field.   Moreover, each of the following can be expressed in the same form ${a+b\sqrt{2}}$.
  \begin{itemize}
  \item $(a_1 + b_1\sqrt{2}) + (a_2 + b_2\sqrt{2})$
  \item $-(a + b\sqrt{2})$
  \item $(a_1 + b_1\sqrt{2}) \times (a_2 + b_2\sqrt{2})$
  \item {\Large $\frac{1}{a + b\sqrt{2}}$}, provided $a,b$ are not both 0.
  \end{itemize}
  In particular
  \begin{align*}
  (a_1 + b_1\sqrt{2}) + (a_2 + b_2\sqrt{2}) &= \underbrace{(a_1+a_2)}_{\in \mathbb{Q}}+\underbrace{(b_1+b_2)}_{\in \mathbb{Q}}\sqrt{2}\\
  -(a + b\sqrt{2}) &= \underbrace{-a}_{\in \mathbb{Q}} + \underbrace{-b}_{\in \mathbb{Q}}\sqrt{2}\\
  (a_1 + b_1\sqrt{2}) \times (a_2 + b_2\sqrt{2}) &= \underbrace{(a_1a_2+2b_1b_2)}_{\in \mathbb{Q}} + \underbrace{(a_1b_2+a_2b_1)}_{\in \mathbb{Q}}\sqrt{2}\\
  \frac{1}{a + b\sqrt{2}} &= \underbrace{\frac{a}{a^2-2b^2}}_{\in \mathbb{Q}} + \underbrace{\frac{-b}{a^2-2b^2}}_{\in \mathbb{Q}}\sqrt{2}
  \end{align*}
  Why do we know $a^2 -2b^2 \ne 0$ and $a+b\sqrt{2} \ne 0$?

\end{enumerate}

\clearpage
\subsection{Summary of Algebraic Structures}


\begin{enumerate}
\item A \emph{monoid} is a set where we can add.
\item A \emph{group} is a set where we can add and subtract.
\item A \emph{ring} is a set where we can add, subtract, and multiply.
\item A \emph{field} is a set where we can add, subtract, multiply, and divide.
\end{enumerate}

For simplicity we omit the formal definition of \emph{semi-ring} which is a
set in which we can add and multiply, but not necessarily subtract and divide.

These summaries are vague.  For example when we say ``add'' in a
monoid, the actual multiplication may be addition, multiplication,
concatenation, or many other operations depending on the actual
monoid.  The distinction between adding and multiplying requires that
both exist, thus they can only be distinguished in a semi-ring.

If a set has both a $1$ and a $0$ then dividing by $0$ does not make
sense.  For example, in a field, we require all non-zero elements to
have and multiplicative inverse even though all elements have an
additive inverse.


\clearpage
\subsection{Matrix Arithmetic}\label{sec.matrix.multiply}

Two matrices of the same dimensions can be added.
%% https://www.physicsread.com/latex-matrix-multiplication/
To compute the sum of two matrices, $A,B$, simply add the corresponding
elements as shown in Equation~\eqref{eq.add.matrix}

  $$
     \begin{bmatrix}
         a_{11} & a_{12} & \cdots & a_{1n}\\
         a_{21} & a_{22} & \cdots & a_{2n}\\ 
         \vdots & \vdots & \ddots & \vdots\\ 
         a_{m1} & a_{m2} & \cdots & a_{mn} 
     \end{bmatrix}
     +
     \begin{bmatrix}
         b_{11} & b_{12} & \cdots & b_{1n}\\
         b_{21} & b_{22} & \cdots & b_{2n}\\ 
         \vdots & \vdots & \ddots & \vdots\\ 
         b_{m1} & b_{m2} & \cdots & b_{mn} 
     \end{bmatrix}
      =
     \begin{bmatrix}
         c_{11} & c_{12} & \cdots & c_{1n}\\
         c_{21} & c_{22} & \cdots & c_{2n}\\ 
         \vdots & \vdots & \ddots & \vdots\\ 
         c_{m1} & c_{m2} & \cdots & c_{mn} 
     \end{bmatrix}
  $$

     \begin{align}
       c_{ij} &= a_{ij} + b_{ij} \label{eq.add.matrix}
     \end{align}


Two matrices, $A,B$, can be multiplied under the condition that the
number of number of columns of $A$ is the same as the number of rows
of $B$.  I.e., if $A$ has dimension $m\times n$ ($m$ rows and $n$
columns), and $B$ has dimension $n\times p$ ($n$ rows and $p$
columns), then $A\times B$ has dimension $m\times p$ ($m$ rows and $p$
columns).  The formula for the $i,j$ element of the product is given
in equation~\eqref{eq.matrix.multiply}

     $$
     \begin{bmatrix}
         a_{11} & a_{12} & \cdots & a_{1n}\\
         a_{21} & a_{22} & \cdots & a_{2n}\\ 
         \vdots & \vdots & \ddots & \vdots\\ 
         a_{m1} & a_{m2} & \cdots & a_{mn} 
     \end{bmatrix}
     \times
     \begin{bmatrix}
         b_{11} & b_{12} & \cdots & b_{1p}\\
         b_{21} & b_{22} & \cdots & b_{2p}\\ 
         \vdots & \vdots & \ddots & \vdots\\ 
         b_{n1} & b_{n2} & \cdots & b_{np} 
     \end{bmatrix}
      =
     \begin{bmatrix}
         c_{11} & c_{12} & \cdots & c_{1p}\\
         c_{21} & c_{22} & \cdots & c_{2p}\\ 
         \vdots & \vdots & \ddots & \vdots\\ 
         c_{m1} & c_{m2} & \cdots & c_{mp} 
     \end{bmatrix}
  $$

\begin{align}
  c_{ij}= a_{i1} b_{1j} + a_{i2} b_{2j} +\cdots+ a_{in} + b_{nj} = \sum_{k=1}^n a_{ik}b_{kj}\label{eq.matrix.multiply}
\end{align}

Each entry in the product, $C = A\times B$, can be thought of as a row of $A$ times a column of $B$.

$$
     \begin{bmatrix}
         a_1 & a_2 & \cdots & a_n
     \end{bmatrix}
     \times
     \begin{bmatrix}
         b_1\\
         b_2\\
         \vdots\\
         b_3
     \end{bmatrix}
      =[a_1 \cdot b_1 + a_2 \cdot b_2 +\cdots+ a_n \cdot b_n]
  $$ 



\clearpage
\subsection{Fast Exponentiation in a Monoid and Group}

Recall the definition of exponentiation in
Equation~\eqref{eq.slow.exponent}.  In any monoid with operation $\circ$ and identity
element $e$, we can compute an
integer power of an element more efficiently according to the
following formula.



\begin{equation}
  x^n = \begin{cases}
    e &\,; \text{if $n=0$}\\
    x &\,; \text{if $n=1$}\\
    x \circ x^{n-1} &\,; \text{if $n$ is odd}\\
    (x^\frac{n}{2})\circ     (x^\frac{n}{2}) &\,; \text{if $n$ is even}\\
  \end{cases}
\end{equation}\label{eq.fast.exponent}

If the monoid is also group, then inverse elements exist, so we can
talk about \emph{negative} exponents in the sense that $x^{-n} =
(x^{-1})^n = (x^n)^{-1}$, in which case we can compute positive and
negative powers efficiently.  Either we compute $x^{|n|}$ and then
compute its inverse, or we can compute $x^{-1}$ and then raise that to
the power of $|n|$.

\begin{equation}
  x^n = \begin{cases}
    e &\,; \text{if $n=0$}\\
    x &\,; \text{if $n=1$}\\
    x \circ x^{n-1} &\,; \text{if $n>0$ is odd}\\
    (x^\frac{n}{2})\circ     (x^\frac{n}{2}) &\,; \text{if $n>0$ is even}\\
    (x^{-1})^{|n|} &\,; \text{if $n<0$}\\
  \end{cases}
\end{equation}\label{eq.fast.exponent.group}




\clearpage
\section{Programming perspective}
\begin{figure}
\centering
\includegraphics[width=0.65\textwidth]{cs.jpg}
\end{figure}

\subsection{Some new types}
\begin{itemize}
\item \code{Option[T]}, \code{Some(x)}, \code{None}
\item \code{Map[S,T]}
\item Tuples \code{(S,T)}
\item \code{X => Y}
\end{itemize}

\subsection{Monoid}
\begin{itemize}
\item \code{String} concatenation
\item \code{List[Int]}, \code{Vector[Int]}, \code{Seq[Int]} concatenation
\item Implement \code{fastPower} for \code{Double}.
\item Refactor (or re-implement) \code{power} (for \code{String} and
  \code{List}) from Section~\ref{sec.recursive.functions} to work like
  \code{fastPower}.
\end{itemize}


\subsection{Higher order functions}
You will need functions like this to implement the Team Project in Section~\ref{sec.team.project.structures}.

What is a \emph{predicate}?  It is a pure function which returns a
\code{Boolean}.  It is used to determine which a property holds for a
given input value.

\begin{itemize}
\item \code{find} --- find an element of a collection (if such exists)
  which satisfies a given predicate.  \code{Option[T]}
\item \code{forall} --- does every element of a collection satisfy a
  given predicate.  Remember the collection might be empty.
\item \code{exists} --- does at least one element of a sequence
  satisfy a given predicate.
\item \code{filter} --- collect all the elements of a collection which
  satisfy a given predicate.
\item \code{sortBy}/\code{sortWith} --- reorder (sort) the elements of
  a sequence according to a given function.
\item \code{map} --- create a new sequence by applying a given
  function iteratively to each element of a collection.
  
\end{itemize}

\subsection{Multiple dimensional types}

\begin{itemize}
\item  \code{Seq[Seq[Int]]},  \code{Seq[Seq[Double]]}
\item Implement matrix using \code{Vector[Vector[Double]]}.  We implement \code{matrixIdentity}, \code{matrixAdd},
  \code{matrixScale}, \code{matrixMultiply} using concentric loops.
\item Then refactor to move the concentric loops into single function, \code{matrixTabulate}.
\item Ring of matrixes (matrix add, subtract, multiply)
\end{itemize}

\subsection{The \code{Map[]} type}
\begin{itemize}
\item \code{Map[Int,Int]}, creating, manipulating
\item Implement polynomial using \code{Map[Int,Double]}
\item Ring of polynomials (polynomial add, scale, subtract, multiply)
\item \code{almostEqual} comparing floating point
\end{itemize}

\clearpage

\subsection{Binary Search}

A binary search algorithm is a divide an conquer algorithm.  Suppose
we know that some \emph{event} occurs at a number between $x_{left}$
and $x_{right}$.  For example, suppose $f(x) = 0$ for some
$x_{left} < x < x_{right}$.  Then if we take $x_{mid} = \frac{x_{left} + x_{right}}{2}$, then
at least one of the following is true.

\begin{align}
  f(x) & = 0 & \text{ for some } x_{left} < x \leq x_{mid}\\
  f(x) & = 0 & \text{ for some }  x_{mid} < x < x_{right}
\end{align}

This means if we split the interval $(x_{left},x_{right})$ in half,
the \emph{event} occurs either in the left half or the right half.
In such a case, we can write a (recursive) function which divides the
interval in half, and \emph{recurs} either on the right half or left half.
We end the recursion when we have found the event.

If we don't find the exact value we are searching for, then we must have a
termination condition to avoid looping forever.  Typically the way this is
done is to recur until the interval is sufficiently small:  i.e., until
${x_{right} - x_{left} < \varepsilon}$.



\subsection{Testing}
\begin{itemize}
\item Testing with \code{main}
\item Debugging with print
\item Property based testing
\item Generating randomly selected object.
\end{itemize}

\subsection{Team work}
\begin{itemize}
\item   projects using git and GitHub
\item pull request
\item merge and rebase
\end{itemize}


\clearpage
\section{Coding Exercises}\label{sec.coding.2}

\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{coding.jpg}
\end{figure}

\subsection{Compute number of combinations}
Recall the definition
\[{n\choose k} = \frac{n!}{k!(n-k)!}\,.\]
Write function to compute this quanity two different ways.
\begin{enumerate}
\item Compute it directly by computing the three factorials and performing
  the integer division.
\item Rather than computing $n!$ directly, express it as a list of
  prime factors.  \Ie,
  \begin{itemize}
  \item implement a function which, given $n$, uses
    recursion to compute and return the list of prime factors of $n$.
  \item Use that function to implement a function which, given $n$, returns
    the prime factors of $n!$.
  \item Effectively perform the division by
    removing all the prime factors in the denominator, $k!(n-k)!$, from
    those of the denominator, $n!$.
  \item Finally, multiply the remaining
    factors to compute~$n\choose k$.
  \end{itemize}
\end{enumerate}

\Eg,
\begin{align*}
  {7\choose 3} &= \frac{7}{3!(7-3)!}\\
  &= \frac{7}{3!~\cdot~4!}\\
  &= \frac{7\cdot 6\cdot 5\cdot 4\cdot 3\cdot 2}{(3\cdot 2)(4\cdot 3\cdot 2)}\\  &= \frac{7\cdot \cancel{3}\cdot \cancel{2}
    \cdot 5\cdot \cancel{2\cdot 2\cdot 3\cdot 2}}{(\cancel{3}\cdot \cancel{2})(\cancel{2\cdot 2\cdot 3\cdot 2})}\\
  &= 7 \cdot 5\\
  &= 35
\end{align*}

Compare the two functions both in terms of computation time, and also
find values of $n\choose k$ which are computable by one function but
not the other because of integer overflow.

\subsection{Team Project: Structure Recognition}
\label{sec.team.project.structures}
\begin{itemize}
\item Implement functions to detect monoid, group,
  ring, and field given a finite set, and the $+$ and $\cdot$
  operations.
\item When finished with your function, commit, push, and send a
  pull request.
\item To test your code, you will need to pull the changes in the
  repository.
\item Define $\mathbb{Z}/n$, the integers modulo $n$. Is it a
  monoid? Is it a group (Abelian)? etc. \ldots
\item For which values of $n$ is $\mathbb{Z}/n$ a field?
\end{itemize}
  
\subsection{Square matrices of Double}

\begin{itemize}
\item Implement matrix arithematic functions: add, scale, subtract,
  multiply, identity, etc..
  
\item Implement power multiply for matrices:
  \code{matrixPower}.  Do this in two different ways: by repeated
  multiplication (compute $M^n$ as a result of $n-1$
  multiplications), and again using the fast power algorithm.
  
\item Can you devise a way to test whether \code{fastPower} is really
  faster?

%% \item Test your code using \code{scalatest}. In the test case,
%%   multiply the slow way and assert that the result is the same as
%%   \code{matrixPower}.  Can you experimentally determine the time
%%   needed to raise a large $m\times m$ matrix to the $n$th power
%%   using the two algorithms?  To find out how to compute the time spent
%%   in a scala function, do an internet search.
  
\item Use the \code{matrixPower} function to compute any three
  consecutive Fibonacci numbers: $F_{n-1}$, $F_{n}$, and $F_{n+1}$,
  \[\begin{bmatrix}1&1\\1&0\end{bmatrix}^n = \begin{bmatrix}F_{n+1}&F_n\\F_n&F_{n-1}\end{bmatrix}\]
  Do these results agree with those you computed in unit 1?
  
\item In Section~\ref{sec.fibonacci.numbers}, you computing
  Fibonacci number using an exponentially complex algorithm.
  Now you have a way which you suspect is more efficient (faster).
  Devise an experiment to determine which of the approaches is
  faster in terms of execution time?  Hint, you may need to contstruct
  a loop to do the same computation 100 times or 1000 times, and the
  divide the total time by 100 or 1000 to compute the average time
  per computation.
\end{itemize}


\subsection{Group Interactive Project}
\begin{itemize}
\item Implement the polynomial ring, with addition,
  subtraction, multiplication.

\item What does it mean for two polynomials to be equal?  For example:
  are these polynomials equal or not?
  \begin{align}
    x^3 - 2x + 1\\
    2x^3 - 4x + 2\\
    -x^3 + 2x - 1
  \end{align}
  Should we consider a polynomial to be the function itself, or should we
  consider it as an equivalence class of all polynomials with the same roots.
  I.e., can we consider \emph{normalized} polynomials such that the leading
  term is 1?
\item Implement \code{polyAlmostEqual}.  Why do we use
  \code{polyAlmostEqual}?  Can we detect whether two polynomials are
  exactly equal?
\item Every odd degree polynomial has a real root.  Can you justify
  this claim?  Write a function which uses a binary search to find
  (estimate) at least one real root of a given odd-degree polynomial.
\item Can you implement \code{polynomialPower} using
  \code{fastPower}.  Is it faster than an iterative implementation?
\item Given a list of roots (perhaps with repeated roots), generate
  the polynomial.  Do this in two ways:
  \begin{enumerate}
  \item Use the polynomial multiply function written above to expand
    \[(x - r_1)(x - r_2)\ldots(x - r_{n-1})(x - r_n)\,.\]
  \item Generate the expansion directly by sums of products of subsets.
    If \[\Pi_{i=1}^n (x - r_i) = \Sigma_{i=0}^n a_{i}x^{n-i}\,\]
    and if \[S = \{T\in \{r_1\ldots r_n\} \mid~ |T| = n\}\,,\]
    then
    \begin{equation}
      a_k = \begin{cases}
        1 & \,; \text{if $k=0$}\\
        \Sigma_{T\in S}\Pi_{k\in T} k & \,; \text{if $1 \leq k \leq n$}
      \end{cases}
    \end{equation}
    
  \end{enumerate}
\item Implement a function to generate a randomly selected polynomial
  of a given degree: \code{randomPoly}.
\end{itemize}



\textbf{Discussion:} Is the set of polynomials of degree $n$ with
integer coefficients an infinite
set or finite set?  Is this set closed under addition?  Are
multiplication and addition associative and commutative? Is it
closed under multiplication?  Does this set form a monoid, group,
ring, or field?

How does the answer change if addition and multiplication of
coefficients is done in $\mathbb{Z}/(n+1)$.

How would you generalize to the polynomial ring over a given field?

Consider the set of polynomials of degree $n$ whose scalars are the
field $\mathbb{Z}/p$.  How would you implement addition, subtraction,
and multiplication?

What if arithmetic on not only coefficients but also exponents is
done in $\mathbb{Z}/(n+1)$.

What would you need to do to use the library you've written
\code{isMonoid}, \code{isGroup} etc to test your hypotheses?  How
would you write a program to generate all such polynomials?

\textbf{Discussion:} Is the set of $n\times n$ matrices with
integer content a finite or infinite set?  What if we restrict the
content to $\mathbb{Z}/(n+1)$?  How would you need to change the
matrix manipulation code you've already written to accommodate
arithmetic in $\mathbb{Z}/(n+1)$?
  


\subsection{Complex matrices [optional]}

The complex numbers,
$\mathbb{C}$, are an extension of the real numbers which allows us,
among other things, to represent $i = \sqrt{-1}$ and consequently to
represent roots of polynomials such as $x^2 + 1 = (x+i)\times(x-i)$.
A complex number, can be expressed as $a + b i$ with $a$ being the
real part and $b$ being the imaginary part.  Together $a+b i$ is a
complex number.

An alternate way of representing a complex number is as a $2\times 2$ matrix.

\[a + ib = \begin{bmatrix}a&-b\\b&a\end{bmatrix}\]
  
\begin{itemize}
    
\item Verify anecdotally by constructing 4 concentric loops
  that
  \[(a_1 + i b_1)\times (a_2 + i b_2) = (a_2 + i b_2)\times (a_1 + i b_1)\,.\]
  
  Use the matrix multiply function you implemented previously.
  
\item Verify anecdotally that $i^2 = -1$.  What does this mean in
  terms of the matrix representation?
\end{itemize}
  
\textbf{Discussion:} in which cases regarding matrices and complex
  numbers can we check associativity and commutativity?  Is matrix
  addition commutative?  Is matrix multiplication commutative?  Is
  complex multiplication commutative?
  
\textbf{Discussion:}    If matrix multiplication is not commutative, but complex
  multiplication is, why can we implement complex numbers in terms
  of matrices?
  

\subsection{Monoid Exponentiation}

You have implemented a \emph{fast-power} function several times for
different types.  Here we implement the same thing for a monoid, and
then refactor the previously implemented functions to use
\code{monoidFastPower}.

\begin{itemize}
\item Implement \code{monoidFastPower}.  The challenge is to figure out what the arguments
  of the function are.
\item Refactor exponentiation of \code{Double}.
\item Refactor matrix exponentiation.
\item Refactor polynomial exponentiation.
\item Refactor complex  exponentiation.
\end{itemize}  

\textbf{Discussion:} What must you do to allow negative exponents?  Is
it possible for a monoid?  Which algebraic structure is necessary to
support negative exponents


\chapter{Convergence}

\begin{figure}[h]
\centering\includegraphics[width=\textwidth]{Archimedes-pi.png}
%%\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=1250248}. By
%%Original: FredrikVector: Leszek Krupinski --- Own work based on:
%%Archimedes pi.png:  by Fredrik, Public Domain.}
\label{fig.circle.perim}
\end{figure}

\clearpage

\begin{figure}[h]
\centering
\includegraphics[width=0.48\textwidth]{bolzano.jpg}~\includegraphics[width=0.48\textwidth]{cauchy.jpg}
%% \footnote{Bernard Bolzano}
%% \footnote{Augustin-Louis Cauchy}
\caption{Bernard Bolzano (left), Augustin-Louis Cauchy (right)}
\end{figure}



In this section we will talk about a characteristic property/attribute
which distinguishes the rational numbers, $\mathbb{Q}$, from the real
numbers, $\mathbb{R}$.  That important feature of $\mathbb{R}$ not
shared by $\mathbb{Q}$ is \emph{convergence}.  But what do we mean by
convergence?

We will discuss the mathematical definition of convergence, and we
will write some programs which approximate real quantities with
sequences which approximate them.

Isaac Newton and Gottfried Leibniz invented calculus around 1660 or
1670.  Some 150 years later, around 1820 Augustin-Louis Cauchy and Bernard Bolzano
presented the concept of the limit.  Thanks to the work of Cauchy and Bolzano and
his contemporaries, we can understand at a fundamental level, the work
of Newton and Leibniz.



\clearpage
\section{Mathematical perspective}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{math.jpg}
\end{figure}

In the previous sections we talked
about the natural numbers, $\mathbb{N}$, the integers, $\mathbb{Z}$,
the rationals, and $\mathbb{Q}$.  In particular we talked about what
distinguishes them from each other.

In an intuitive sense:
\begin{itemize}
  \item $\mathbb{N}$ is a set where we can add and
multiply; \item $\mathbb{Z}$ is a set where we can add, subtract, and
multiply; and \item $\mathbb{Q}$ is a set where we can add, subtract,
multiply, and divide.
\end{itemize}

Unfortunately, we don't have a good example of \textbf{numbers} where
we can add but not multiply; however, we saw examples of so-called
monoids such as simple sets where the union operation is associative,
the empty set, $\emptyset$, is the identity element, but there is no
inverse operation of union, and nothing like multiplication.  



\subsection{Intuition of  convergence?}

In the figure on page~\pageref{fig.circle.perim} we can convince ourselves that the
circumference of the circle is a fixed
quantity.  I.e., it is not an vague, indefinite concept, but the
circumference of a circle has a real, actual, definite length.



The length of the circumference of the circle is always greater than the
length of the perimeter of an inscribed polygon, and is always less
than the length of the perimeter of a circumscribed polygon.
Moreover, we have a decreasing sequence of numbers and an increasing
sequence of numbers which grow arbitrarily close together.  I.e.,
choose any small number, $\varepsilon$.  Now find a sufficiently large
n such that the perimeter of the circumscribed n-sided polygon is within
$\varepsilon$ of the perimeter of the inscribed polygon.  The
sandwiched value is the circumference of the circle.

The real numbers, $\mathbb{R}$, is the smallest set which contains all these numbers.
\[\mathbb{Q} \subset \mathbb{R}\]
\[\mathbb{R} \not\subset \mathbb{Q}\]


As another example, using infinite sums which we will talk about in a
later unit, consider the sequence: $(a_0, a_1, a_2, \ldots)$, such
that $a_n$ is defined as:
\[a_n = \sum_{k=0}^{n}\frac{8}{(4k+1)(4k+3)}\]

This sequence is discussed on wikipedia.\footnote{Leibniz formula,
\url{https://en.wikipedia.org/wiki/Leibniz_formula_for_pi}}.  This is
a sequence of rational numbers; each numerator is an integer, namely
8, and each denominator is an integer.  The successive rational
numbers, $a_n$ and $a_{n+1}$ may be made as close as you like by
choosing sufficiently large $n$.  Thus this sequence is Cauchy.
Nevertheless, the value this sequence tends to is not rational.  If you
chose any rational number, $q\in\mathbb{Q}$, then either:
\begin{enumerate}
\item You can find an $N$ such that if $n>N$ then $a_n>q$.
\item You can find an $N$ such that if $n>N$ then $a_n<q$.
\end{enumerate}

  Thus we say that this sequence
does not converge in $\mathbb{Q}$.  However, it converges to in
$\mathbb{R}$.  In particular
\[a_n \to \pi\,.\]



\subsection{The limit of a sequence}
The limit is the most fundamental concept in
Calculus.
\[\lim_{n\to\infty} a_n = a\]
means that $\forall~\varepsilon > 0~ \exists~ N\in\mathbb{N}$ such
that if $n>N$ then $|a_n - a| < \varepsilon$.


A sequence $\lbrace a\rbrace_n$ converges to $a$, written $a_n\to a$,
if \[\lim_{n\to\infty} a_n = a\,.\]
  

A sequence is $\lbrace a\rbrace_n$ is said to be Cauchy, if
$\forall~\varepsilon > 0~ \exists~ N\in\mathbb{N}$
such that if $n>N$ and $m>N$ then $|a_n - a_m| < \varepsilon$.

\includegraphics[width=9cm]{Folgenglieder_im_KOSY.png}
%%\footnote{By Ceranilo, CC BY-SA 4.0,
% https://commons.wikimedia.org/w/index.php?curid=54837240}
\\Example of a sequence which converges to the limit $a$.

\includegraphics[width=9cm]{Epsilonschlauch.png}
%%\footnote{By Ceranilo, CC BY-SA 4.0,
%% https://commons.wikimedia.org/w/index.php?curid=54836520}
\\Regardless which $\varepsilon >0$ we have, there is an index
$N_0$, so that the sequence lies afterwards completely in the
epsilon tube $(a-\varepsilon ,a+\varepsilon)$.


\includegraphics[width=9cm]{Epsilonschlauch-klein.png}
%%\footnote{By Ceranilo, CC BY-SA 4.0,
%% https://commons.wikimedia.org/w/index.php?curid=54836607} 
\\There
is also for a smaller $\varepsilon_{1}>0$, an index $N_{1}$, so
that the sequence is afterwards inside the epsilon tube
$(a-\varepsilon_{1},a+\varepsilon_{1})$.

  
\clearpage\section{Programming perspective}
\begin{figure}
\centering
\includegraphics[width=0.65\textwidth]{cs.jpg}
\end{figure}

  \begin{enumerate}
  \item tail recursion,
  \item fixed point
  \item higher order functions
  \item function type
  \item representing finite and infinite sequences.
  \item sequence functions: \code{map}, \code{filter}, \code{max}, \code{sum}, \code{head}, \code{tail}, 
  \item \code{for} comprehension
  \end{enumerate}


\clearpage
\section{Coding Exercises}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{coding.jpg}
\end{figure}

\subsection{Sequences}
\begin{itemize}
\item Define a sequence \[a_n =
  \sum_{k=0}^{n}\frac{8}{(4k+1)(4k+3)}\,.\] Given $n$, compute the sequence of
  $n+1$ numbers, and use the \code{sum} method to add them up. (We will
  discuss a better way tomorrow).
\item Compute the same sums using normal recursion and tail recursion.
\item Convince yourself that $\{a_n\}$ is strictly increasing; i.e.,
  $a_n < a_{n+1}$.  Can you show this empirically? Can you prove
  this mathematically?
\item However, the sequence of successive
  differences is decreasing: if $d_n = a_{n+1} - a_n$ then the
  sequence $\{d_n\}$ is decreasing: $d_n > d_{n+1}$.  Show this
  empirically and mathematically.
\end{itemize}

\subsection{Convergence}
\begin{itemize}
\item Now implement a function such that given $\varepsilon$, find and
  return $N$, such that \[n>N \implies |a_n - \pi| < \varepsilon\,.\]
\item Detect Cauchy of sequences: write a function such that given a
  sequence in the form of a function, $a$ of an \code{Int} $k$, and
  a \code{Double} $\varepsilon$.  The function should return an
  \code{Int}, $k$, indicating the first value for which $| a_k -
  a_{k+1}| < \varepsilon$.
\item Use Google or Wikipedia etc, to find another sequence which
  converges to $\pi$.  Use the function you just wrote to
  empirically verify this conversion.
\item Now you have two sequences which both converge to $\pi$. Does
  the sequence created by averaging the corresponding elements also
  converge?  If so, what does it converge to?  Does it converge
  faster or slower?  Can you devise an experiment to show
  empirically?
\end{itemize}  




\chapter{Infinite sums}

\begin{figure}[h]
\centering\includegraphics[height=10cm]{infsum.jpg}
\end{figure}

\clearpage


\section{Mathematical perspective}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{math.jpg}
\end{figure}

In this chapter we'll look at ways to compute sums like these
\begin{align}
  \exp(x) &= \sum_{k=0}^{\infty} \frac{x^k}{k!}\\
  \sin(x) &= \sum_{k=0}^{\infty} \frac{{(-1)}^{k}x^{2k+1}}{(2k+1)!}\\
  \cos(x) &= \sum_{k=0}^{\infty} \frac{{(-1)}^{k}x^{2k}}{(2k)!} \\
  \ln(1+x) &= \sum_{k=1}^{\infty} \frac{{(-1)}^{k-1}x^{k}}{k}\,.
\end{align}



  \begin{enumerate}
  \item Review functions $\sin$, $\cos$, $\exp$, and $\ln$.
    \includegraphics[width=9cm]{sin-cos.png}
%%\footnote{
%%    \url{https://commons.wikimedia.org/w/index.php?curid=57551646} By Stephan Kulla
%%    (User:Stephan Kulla) --- Own work, CC0.}
  \item Contrast convergence and summability.
  \item Taylor series is of the form
    \[\sum_{k=0}^{\infty} a_{n}x^{n}\,.\]
    In some cases this series converges to an interesting function.
    Since the $x^n$ terms are increasing rapidly, the $a_n$ terms must
    therefore decrease (in absolute value) rapidly otherwise the
    series will not converge (it will diverge).

\includegraphics[width=10cm]{sintay.png}
%%\footnote{By IkamusumeFan ---
%%Own work, CC BY-SA 3.0,
%%\url{https://commons.wikimedia.org/w/index.php?curid=27865201}} 

    As the degree of the Taylor polynomial rises, it approaches the
    correct function.  This image shows $\sin x$ and its Taylor
    approximations by polynomials of degree 1, 3, 5, 7, 9, 11, and 13
    at $x = 0$.

  \end{enumerate}
  
\clearpage
\section{Programming perspective}
\begin{figure}
\centering
\includegraphics[width=0.65\textwidth]{cs.jpg}
\end{figure}

  \begin{enumerate}
  \item \code{Option[]}
  \item folding:  \code{foldLeft},  \code{reduce}, \code{reduceOption}
  \item \code{Either[]}
  \item Introduce \code{foldM}
  \end{enumerate}

\clearpage
\section{Coding Exercises}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{coding.jpg}
\end{figure}

\subsection{Taylor series with numbers}

\begin{enumerate}
\item Reimplement factorial using \code{foldLeft}.
\item Implement the $\sin$, $\cos$, and $\exp$ functions in terms
  of the infinite Taylor series, understand conditions of convergence, avoiding infinite loops.
\item Devise a way using an $\varepsilon$ and the \code{foldM}
  function to elegantly terminiate the iteration with the target value
  is close enough.
\item Improve convergence using shifting and scaling.
  
  \begin{align}
    \sin(x) &= \sin(x - 2\pi k)\\
    \cos(x) &= \cos(x - 2\pi k)
  \end{align}
  To improve the convergence of $\sin$ and $\cos$, translate the argument some number of full periods
  so that the argument lies between $-\pi$ and $\pi$.  Choose $k$ such that $-\pi \leq x - 2\pi k \leq \pi$, then
  compute $\sin(x - 2\pi k)$ or $\cos(x - 2\pi k)$
  \begin{align}
    e^x &= (e^{x/k})^k
  \end{align}
  To improve the convergence of $e^x$, compute the exponential of a smaller power, then raise the
  result to an integer power. Choose $k$ such that $x/k < 2$. Compute $e^{x/k}$. Then use
  the fast-power algorithm to raise that value to the power of $k$.
\end{enumerate}


\subsection{Taylor series with matrices}
\begin{enumerate}
\item Compute $\sin$ and $\cos$ of square matrices.
\item Determine experimentally the value of $\cos^2(M) + \sin^2(M)$ for a square matrix $M$.
\item For square matrices, $x$ and $y$, can you anecdotally verify or disprove the identity $e^x \times e^y = e^{x+y}$?
\item Can you find other trigonometric identities which have an analog
  in the world of trigonometry on matrices?  Can you find identities
  on the real numbers which don't correspond to matrices?
\item Compute $\sin$ and $\cos$ of complex numbers using $2\times 2$ matrix.
\item Can you anecdotally verify or disprove the identity $e^x \times e^y = e^{x+y}$?
\item For complex numbers, $x$ and $y$, can you anecdotally verify or disprove the identity $e^x \times e^y = e^{x+y}$?
\end{enumerate}


\chapter{Differential Calculus [Optional]}
\begin{figure}[h]
  \centering
\includegraphics[width=12cm]{Tangent-calculus.png}
\caption{Intuitively, the derive compute the slope of the line tangent to a curve at a given point.}
\label{lab.deriv.by.tangent.line}
\end{figure}

\clearpage

\section{Mathematical perspective} 

\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{math.jpg}
\end{figure}


We start our discussion of the derivative by talking about the limit.
We saw the limit already in terms of sequences.  Now we look at a
slightly different concept, and extension, of the limit in terms of a
function of a single variable.  We will thereafter, define the
derivative in terms of the limit.  Additionally, we will follow the
same model programmatically, by defining a function to estimate the
limit, then to implement a function to estimate the derivative using
the limit function.
  
  \begin{enumerate}
  \item Intuition of limit.  Consider the function:
    \[f(x) = \frac{x-1}{x^2-1}\,.\]
    We cannot evaluate this function at $x=1$; however if we take
    values of $x$ close to $1$, the function evaluates just fine, and
    is well-behaved.  Take a sequence of values approaching 1, and ask
    yourself what value does $f(x)$ approach?

    It turns out that any sequence $a_n \to 1$ (except those for which
    $a_k = 1$ for some $k$) corresponds to a convergent sequence
    $f(a_n) \to \frac{1}{2}$.

    Another way of phrasing this intuition is that we can make
    $\frac{x-1}{x^2-1}$ close to $\frac{1}{2}$ by making $x$ close to
    $1$.  But that statement is a vague.  We can make the statement
    more precise by saying that we can make $\frac{x-1}{x^2-1}$
    arbitrarily close to $\frac{1}{2}$ by making $x$ sufficiently
    close to $1$.

  \item Definition of limit
    \includegraphics[width=8cm]{limit.png}
%%\footnote{By User:HiTe --- Own
%%    work, Public Domain,
%%    \url{https://commons.wikimedgia.org/w/index.php?curid=2314281}}.

  What does this notation mean? \[\lim_{x\to a}f(x) = L\]
  It means that: $\forall \varepsilon > 0~\exists \delta > 0$ such that
  \[|x - a| < \delta \implies |f(x) - f(a)| < \varepsilon\,.\]
  

  Using the language we used above: the limit of a function $f$ at $a$
  is $L$ means that we can make the value of $f$ arbitrarily close to
  $L$ by making its argument sufficiently close to $a$.

  \item Intuition of derivative

    \begin{figure}
      \centering
\noindent\begin{tabular}{lp{3cm}}
\Includegraphics[width=9cm]{Secant-calculus.png}
%%\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=4369993}
%% By derivative work: Pbroks13 (talk) \texttt{Secant-calculus.png}: 
%%Shizhao --- \texttt{Secant-calculus.png}, CC BY-SA 3.0, }

&The secant to curve $y= f(x)$ determined by points $(x, f(x))$ and $(x + h, f(x + h))$.\\
\Includegraphics[width=9cm]{Lim-secant.png}
%%\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=4370022} By derivative work: Pbroks13 (talk) \texttt{Lim-secant.png}: The original uploader was CSTAR at English Wikipedia. --- \texttt{Lim-secant.png}, CC BY-SA 3.0.}

&The tangent line as limit of secants.
\end{tabular}

\caption{We may estimate the derivative by a sequence of secant lines which estimate
the tangent line.  The secant lines approach the tangent line in Figure~\ref{lab.deriv.by.tangent.line}.}
\end{figure}

    Again we can generate a sequence of values (of $h\to 0$)
    approaching 0, and from that we can generate a sequence of values
    of the slope of $f$, i.e., $\frac{f(x+h)-f(x)}{h}$.  Does this
    sequence of slopes converge when the sequence of $h$ values
    converges to $0$?


    If $h \to 0$ then does $\frac{f(x+h)-f(x)}{h}$ approach some
    value?  The value may very well be different for each $x$.  If so
    that set of values is therefore a function of $x$, which leads to
    the definition of the derivative.
    

\item Definition of derivative
  \[f'(x) = \lim_{h\to 0}\frac{f(x+h) - f(x)}{h} = \lim_{a\to x}\frac{f(x) - f(a)}{x - a}\,.\]
\noindent\includegraphics[width=10cm]{derivative.png}
%% \footnote{\url{https://betterexplained.com/articles/calculus-building-intuition-for-the-derivative} From web page.}


\item Linearity of derivative.
  \[f(x) = h(x) + g(x) \implies f'(x) = h'(x) + g'(x)\,,\]
  and \[f(x) = \alpha h(x) \implies f'(x) = \alpha h'(x)\,.\]

\item Product rule
  \[f(x) = h(x)g(x) \implies f'(x) = f(x)g'(x) + f'(x)g(x)\,.\]
\item Derivative of polynomial using induction and product rule.
  \[f(x) = x^n \implies f'(x) = n x^{n-1}\,.\]
\item Thus we can compute the derivative of any polynomial:
  If \[f(x) = \sum_{k=0}^{n} a_n x^k\,,\] then \[f'(x) = \sum_{k=0}^{n} k a_n  x^{k-1}\,.\]

  \end{enumerate}
  
\clearpage\section{Programming perspective}
\begin{figure}
\centering
\includegraphics[width=0.65\textwidth]{cs.jpg}
\end{figure}
  \begin{enumerate}
  \item Definition of derivative in terms of limit,
  \item Derivative of polynomial
  \end{enumerate}


\clearpage
\section{Coding Exercises}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{coding.jpg}
\end{figure}

\begin{enumerate}
\item Implement the \code{limit} function as a function which
  manipulates functions.
\item Use the \code{limit} function to evaluate    \[\lim_{x\to 1}\frac{x-1}{x^2-1}\,.\]
\item Compute derivative by successive approximation using
the previous implementation of limit.
\item Compute exact derivative of a polynomial
\item Compare two approaches numerically.
\item Compute $\cos$ in terms of derivative of $\sin$,
\item Compare to Taylor series computation.

\end{enumerate}


\chapter{Integral Calculus [Optional]}
\begin{figure}[h]
\includegraphics[width=\textwidth]{integral.png}
%% \footnote{\url{https://www.mathtutordvd.com/public/How-Isaac-Newton-Changed-the-World-with-the-Invention-of-Calculus.cfm}From the web page }
\caption{The initial intuition of the Riemann integral is a computation of the area
  \emph{under} the curve of a given function. }
\end{figure}

\clearpage

\section{Mathematical perspective}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{math.jpg}
\end{figure}

  \begin{enumerate}
  \item The notation and intuition of the integral.
    
  \item Understanding the Riemann sums in terms of infinite
    sums of rectangles.

  \item Integral of polynomial:
    \[\int x^n~dx = \frac{1}{n+1}x^{n+1}\]
    So by linearity,
    \begin{align}
      \int \sum_{k=0}^{n}a_k x^n~dx &= \sum_{k=0}^{n} \int a_k x^n~dx\\
      & = \sum_{k=0}^{n} a_k \int x^n~dx\\
      &= \sum_{k=0}^{n} \frac{a_k}{n+1} x^{n+1}\,.
    \end{align}
    
  \item Fundamental Theorem of Calculus:

  \begin{itemize}
  \item The derivative of the integral is the function.
    \begin{align}
      F(x) = \int_a^x f(t)dt &\implies F'(x) = f(x)\\
      \frac{d}{dx} \int_a^x f(t)dt &= f(x)\,.
    \end{align}
  \item The integral of the derivative is the function.
    \begin{align}
      F'(x) = f(x) & \implies \int_a^b f(x) dx = F(b) - F(a)\\
    \int_a^x f'(t)dt & = f(x) - f(a)\,.
    \end{align}
  \end{itemize}

  \end{enumerate}
  
\clearpage\section{Programming perspective}
\begin{figure}
\centering
\includegraphics[width=0.65\textwidth]{cs.jpg}
\end{figure}
  \begin{enumerate}
  \item Expressing limit of sum of rectangles

    \includegraphics[width=12cm]{Riemann-sum-convergence.png}
%%\footnote{\url{https://commons.wikimedia.org/w/index.php?curid=2347919} By I, KSmrq, CC BY-SA 3.0.}


\item Expressing limit of sum of trapezoids
  
\includegraphics[width=8cm]{Integration-num-trapezes-notation.png}
%% \footnote{\url{https://commons.wikimedia.org/w/index.php?curid=8541370} By Scalerderivative work: Cdang (talk), CC BY-SA 3.0.}

  \end{enumerate}



\clearpage
\section{Coding Exercises}
\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{coding.jpg}
\end{figure}

\begin{enumerate}
\item  Implement integral (function of function) using
  limit, sum of rectangles, and sum of trapezoids.
  Which converges faster?
\item Compute area under line, and show experimentally that it grows quadratically.
\item Compute area under parabola, and show experimentally that it grows cubically.
\item Compute area of a circle by integrating $\sqrt{1 - x^2}$. I.e., compute
  \[2\int_{-1}^{1}\sqrt{1 - x^2}~dx\,.\]
\item Compute explicit integral of polynomial
\item Verify the fundamental theorem of calculus experimentally.
\end{enumerate}


\end{document}



% LocalWords:  EPITA priori epita www luke edu Sentier Etroites Issy
% LocalWords:  Moulineaux gmail les des GitHub IDE GitKraken IntelliJ
% LocalWords:  gitkraken dev MUW GitLab Collaboratory msstate cse com
% LocalWords:  HDMI Lethbridge https uleth ca jpg Programmatic meetup
% LocalWords:  BucharestJS ozassignments png colorized jnewton jimka
% LocalWords:  issy pastpresentfuture thispublicdiary illinois pdf CC
% LocalWords:  NevadaClassClose techservices teamwork MCCRS MDE usna
% LocalWords:  SEC OAE org mdek xkcd lrde mgs Modularity Scala monoid
% LocalWords:  invertability Scalerderivative SA wikimedia php curid
% LocalWords:  trapezes num Folgenglieder KSmrq Pbroks Lim Shizhao en
% LocalWords:  CSTAR IkamusumeFan Epsilonschlauch Ceranilo github svg
% LocalWords:  Abelian magma surjective surjection mathsisfun html
% LocalWords:  Ethaniel wikipedia wiki Int forall Fredrik Krupinski
% LocalWords:  FredrikVector Leszek sintay summability foldLeft foldM
% LocalWords:  klein Leibniz uploader reduceOption groupBy clearpage
% LocalWords:  leibniz hfill scala includegraphics noindent url ldots
% LocalWords:  setminus exp internet quadraticFormula NaN destructure
% LocalWords:  fixedSizedSubsets SetsAndFunctions buildserver galois
% LocalWords:  SetsAndFunctionsTestSuite Monoid Cdang cubically cfm
% LocalWords:  mathtutordvd betterexplained programmatically Bolzano
% LocalWords:  Augustin Gottfried matrixMultiple complexAdd rundebug
% LocalWords:  complexSubtract Binet's refactor fastPower matrixAdd
% LocalWords:  matrixIdentity matrixTabulate matrixMultiply rebase
% LocalWords:  matrixScale almostEqual matrixSubtract isGroup monoids
% LocalWords:  isMonoid IDEs GitPod gitpodenv functionalvsimperative
% LocalWords:  monoidic Mann Wvbailey Evariste youtube Arturo bolzano
% LocalWords:  creativecommons matrixPower polynomialPower perim
% LocalWords:  infsum Destructuring
